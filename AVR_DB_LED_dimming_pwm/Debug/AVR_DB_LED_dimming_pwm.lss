
AVR_DB_LED_dimming_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00804000  00804000  0000021e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039ff  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e76  00000000  00000000  00003cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003d9  00000000  00000000  00006b35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00006f10  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b7d  00000000  00000000  00006f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  00008ad1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00008b17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a4 30       	cpi	r26, 0x04	; 4
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 a0 00 	call	0x140	; 0x140 <main>
 114:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <PORT_init>:
void PORT_init(void);
void TCA1_init(void);

void PORT_init(void)
{
    PORTC.DIRSET = PIN6_bm; /* set pin 6 of PORT C as output */
 11c:	80 e4       	ldi	r24, 0x40	; 64
 11e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
 122:	08 95       	ret

00000124 <TCA1_init>:
}

void TCA1_init(void)
{
    PORTMUX.TCAROUTEA = PORTMUX_TCA10_bm; /* set waveform output on PORT C */
 124:	88 e0       	ldi	r24, 0x08	; 8
 126:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <__TEXT_REGION_LENGTH__+0x7e05e6>

    TCA1.SINGLE.CTRLB = TCA_SINGLE_CMP2EN_bm                /* enable compare channel 2 */
 12a:	e0 e4       	ldi	r30, 0x40	; 64
 12c:	fa e0       	ldi	r31, 0x0A	; 10
 12e:	83 e4       	ldi	r24, 0x43	; 67
 130:	81 83       	std	Z+1, r24	; 0x01
                        | TCA_SINGLE_WGMODE_SINGLESLOPE_gc; /* single-slope PWM mode */

    TCA1.SINGLE.PER = PERIOD_EXAMPLE_VALUE; /* set PWM frequency*/
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	9f e0       	ldi	r25, 0x0F	; 15
 136:	86 a3       	std	Z+38, r24	; 0x26
 138:	97 a3       	std	Z+39, r25	; 0x27

    TCA1.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1_gc /* set clock source (sys_clk/1) */
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <main>:
                        | TCA_SINGLE_ENABLE_bm;   /* start timer */
}

int main(void)
{
    PORT_init();
 140:	0e 94 8e 00 	call	0x11c	; 0x11c <PORT_init>
    TCA1_init();
 144:	0e 94 92 00 	call	0x124	; 0x124 <TCA1_init>

    while (1) {
        TCA1.SINGLE.CMP2 = dutyCycle;
 148:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 14c:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 150:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <__TEXT_REGION_LENGTH__+0x7e0a6c>
 154:	90 93 6d 0a 	sts	0x0A6D, r25	; 0x800a6d <__TEXT_REGION_LENGTH__+0x7e0a6d>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	87 ee       	ldi	r24, 0xE7	; 231
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x1c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x22>
 162:	00 00       	nop

        _delay_ms(1);

        dutyCycle++;
 164:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 168:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 16c:	a0 91 02 40 	lds	r26, 0x4002	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 170:	b0 91 03 40 	lds	r27, 0x4003	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
 174:	01 96       	adiw	r24, 0x01	; 1
 176:	a1 1d       	adc	r26, r1
 178:	b1 1d       	adc	r27, r1
 17a:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 17e:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 182:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 186:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>

        if (dutyCycle == PERIOD_EXAMPLE_VALUE) {
 18a:	8f 3f       	cpi	r24, 0xFF	; 255
 18c:	9f 40       	sbci	r25, 0x0F	; 15
 18e:	a1 05       	cpc	r26, r1
 190:	b1 05       	cpc	r27, r1
 192:	d1 f6       	brne	.-76     	; 0x148 <main+0x8>
            dutyCycle = 0;
 194:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
 198:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 19c:	10 92 02 40 	sts	0x4002, r1	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
 1a0:	10 92 03 40 	sts	0x4003, r1	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
 1a4:	d1 cf       	rjmp	.-94     	; 0x148 <main+0x8>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
