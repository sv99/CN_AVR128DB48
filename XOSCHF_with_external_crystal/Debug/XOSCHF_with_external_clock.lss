
XOSCHF_with_external_clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000258  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000035e4  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e97  00000000  00000000  00003884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b2  00000000  00000000  0000671b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000019bc  00000000  00000000  00006c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000085c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00008608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
 104:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <CLOCK_XOSCHF_clock_init>:
}

void CLOCK_XOSCHF_clock_init(void)
{
    /* Enable crystal oscillator with frequency range 16 MHz and 4K cycles start-up time */
    ccp_write_io((uint8_t*)&CLKCTRL.XOSCHFCTRLA, CLKCTRL_RUNSTDBY_bm | CLKCTRL_CSUTHF_4K_gc |
 10c:	65 ea       	ldi	r22, 0xA5	; 165
 10e:	80 e8       	ldi	r24, 0x80	; 128
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 c2 00 	call	0x184	; 0x184 <ccp_write_io>
                                                     CLKCTRL_FRQRANGE_16M_gc |
                                                     CLKCTRL_SELHF_XTAL_gc | CLKCTRL_ENABLE_bm);

    /* Confirm crystal oscillator start-up */
    while (!(CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm)) {
 116:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 11a:	84 ff       	sbrs	r24, 4
 11c:	fc cf       	rjmp	.-8      	; 0x116 <CLOCK_XOSCHF_clock_init+0xa>
        ;
    }

    /* Clear Main Clock Prescaler */
    ccp_write_io((uint8_t*)&CLKCTRL.MCLKCTRLB, 0x00);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	81 e6       	ldi	r24, 0x61	; 97
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 c2 00 	call	0x184	; 0x184 <ccp_write_io>

    /* Set the main clock to use XOSCHF as source, and enable the CLKOUT pin */
    ccp_write_io((uint8_t*)&CLKCTRL.MCLKCTRLA, CLKCTRL_CLKSEL_EXTCLK_gc | CLKCTRL_CLKOUT_bm);
 128:	63 e8       	ldi	r22, 0x83	; 131
 12a:	80 e6       	ldi	r24, 0x60	; 96
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 c2 00 	call	0x184	; 0x184 <ccp_write_io>

    /* Wait for system oscillator changing to complete */
    while (CLKCTRL.MCLKSTATUS & CLKCTRL_SOSC_bm) {
 132:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 136:	80 fd       	sbrc	r24, 0
 138:	fc cf       	rjmp	.-8      	; 0x132 <CLOCK_XOSCHF_clock_init+0x26>
        ;
    }

    /* Clear RUNSTDBY for power save during sleep */
    ccp_write_io((uint8_t*)&CLKCTRL.XOSCHFCTRLA, CLKCTRL.XOSCHFCTRLA & ~CLKCTRL_RUNSTDBY_bm);
 13a:	60 91 80 00 	lds	r22, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
 13e:	6f 77       	andi	r22, 0x7F	; 127
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c2 00 	call	0x184	; 0x184 <ccp_write_io>
 148:	08 95       	ret

0000014a <main>:
    LED_PORT.DIRSET = LED_PIN_bm;
}

int main(void)
{
    CLOCK_XOSCHF_clock_init();
 14a:	0e 94 86 00 	call	0x10c	; 0x10c <CLOCK_XOSCHF_clock_init>

void CLOCK_XOSCHF_clock_init(void);

static inline void LED0_init(void)
{
    LED_PORT.DIRSET = LED_PIN_bm;
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
    LED0_init();

    /* Replace with your application code */
    while (1) {
        /* LED0 on */
        LED_PORT.OUTSET = LED_PIN_bm;
 154:	e0 e2       	ldi	r30, 0x20	; 32
 156:	f4 e0       	ldi	r31, 0x04	; 4
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	33 ed       	ldi	r19, 0xD3	; 211
 160:	90 e3       	ldi	r25, 0x30	; 48
 162:	21 50       	subi	r18, 0x01	; 1
 164:	30 40       	sbci	r19, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x18>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x22>
 16c:	00 00       	nop
        _delay_ms(DELAY_TIME);
        /* LED0 off */
        LED_PORT.OUTCLR = LED_PIN_bm;
 16e:	86 83       	std	Z+6, r24	; 0x06
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	33 ed       	ldi	r19, 0xD3	; 211
 174:	80 e3       	ldi	r24, 0x30	; 48
 176:	21 50       	subi	r18, 0x01	; 1
 178:	30 40       	sbci	r19, 0x00	; 0
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x2c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x36>
 180:	00 00       	nop
 182:	e8 cf       	rjmp	.-48     	; 0x154 <main+0xa>

00000184 <ccp_write_io>:
 184:	dc 01       	movw	r26, r24
 186:	28 ed       	ldi	r18, 0xD8	; 216
 188:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7e0034>
 18c:	6c 93       	st	X, r22
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
